package com.example.redhood.farmconnect01;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;

import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import android.view.KeyEvent;

import java.io.IOException;
import java.security.Key;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by redhood on 3/25/2018.
 */

public class theMapActivity extends AppCompatActivity implements OnMapReadyCallback {

    @Override
    public void onMapReady(GoogleMap googleMap) {
        Toast.makeText(this, "the Map is Ready", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "onMapReady: ready");
        mMap = googleMap;

        // From here, we add the markers on different locations
        // First, the Zombie-infested areas

        LatLng aavin = new LatLng(12.9712249,79.1578756);
        googleMap.addMarker(new MarkerOptions().position(aavin)
                .title(" Danger!"));
        LatLng sjt = new LatLng(12.9712792,79.1576358);
        googleMap.addMarker(new MarkerOptions().position(sjt)
                .title(" Danger!"));
        LatLng limra = new LatLng(12.9660207,79.1557627);
        googleMap.addMarker(new MarkerOptions().position(limra)
                .title(" Danger!"));
        LatLng woodstock  = new LatLng(12.9684893,79.1578992);
        googleMap.addMarker(new MarkerOptions().position(woodstock)
                .title(" Danger!"));
        LatLng library = new LatLng(12.9687895,79.1575214);
        googleMap.addMarker(new MarkerOptions().position(library)
                .title(" Danger!"));
        LatLng plantnursery = new LatLng(12.967338,79.1580722);
        googleMap.addMarker(new MarkerOptions().position(plantnursery)
                .title(" Danger!"));

        // Now, the target area marker is to be set
        LatLng target = new LatLng(12.9682649,79.1561743);
        googleMap.addMarker(new MarkerOptions().position(target)
                .title(" Target!"));


        if (mLocationPermissionsGranted) {
            getDeviceLocation();
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                    != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return;
            }
            mMap.setMyLocationEnabled(true);
            mMap.getUiSettings().setMyLocationButtonEnabled(false);

            // At first, the last method gives error
            // So, we need to give the explicit permission check for the method

            // We need to add a button to the 'marked' location so that it redirects us to a different activity

            init();
            btninit();
        }
    }

    private static final String TAG="MainActivity";   // This for using it everywhere


    // create the global string variables to do them as many times as required
    private static final String FINE_LOCATION= Manifest.permission.ACCESS_FINE_LOCATION;
    private static final String COARSE_LOCATION= Manifest.permission.ACCESS_COARSE_LOCATION;

    private static final int LOCATION_PERMISSION_REQUEST_CODE=1234;

    //widgets
    private EditText mSearchText;

    private ImageView mGps;



    //variables

    private Boolean mLocationPermissionsGranted= false;
    private GoogleMap mMap;

    private FusedLocationProviderClient mFusedLocationProviderClient; // this is a fairly new object

    private static final float DEFAULT_ZOOM_MAGNITUDE=15f; // This is the magnitude of the zoom to be performed

    // If any changes are to be made, change the value of this variable

    // We'll get a blank Map Activity if the API isn't enabled from the Cloud

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.the_map_activity);

        getLocationPermission();

        mSearchText=(EditText) findViewById(R.id.input_search);
        mGps=(ImageView) findViewById(R.id.ic_gps);
        init();

        btninit();   // call the button initialization function to navigate

        /* go to the res---> layout ----> to create a new activity */

    }

    private void init(){
        Log.d(TAG,"init: initializing");

        mSearchText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {

                if (actionId == EditorInfo.IME_ACTION_SEARCH
                        || actionId == EditorInfo.IME_ACTION_DONE
                        || event.getAction() == KeyEvent.ACTION_DOWN
                        || event.getAction() == KeyEvent.KEYCODE_ENTER) {

                    geolocate();
                }
                return false;
            }

        });

        mGps.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                 Log.d(TAG, "onClick: clicked gps icon ");
                 getDeviceLocation();

            }
        });

        hidesoftkeyboard();
    }

    public void btninit(){

        Button button1=(Button)findViewById(R.id.friendsBT);
        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                Intent intent1= new Intent(theMapActivity.this, friendsactivity.class);    // this takes effect after we have the activity
                startActivity(intent1);
            }
        });

    }


    private void geolocate(){
        Log.d(TAG, "geolocate: Gelocating");
        String searchString=mSearchText.getText().toString();

        Geocoder geocoder = new Geocoder(theMapActivity.this);
        List<Address> list= new ArrayList<>();
        try{
            list=geocoder.getFromLocationName(searchString,1);
        }
        catch(IOException e) {
            Log.d(TAG,"geolocate: IOException: " +e.getMessage());
        }

        if(list.size()>0)
        {
            Address address=list.get(0);
            Log.d(TAG, "geolocate: found a location " + address.toString());

            moveCamera(new LatLng(address.getLatitude(), address.getLongitude()), DEFAULT_ZOOM_MAGNITUDE, address.getAddressLine(0));

        }
    }

    private void getDeviceLocation()
    {
        Log.d(TAG, "getDeviceLocation: getting the device's current location");

        mFusedLocationProviderClient= LocationServices.getFusedLocationProviderClient(this);

        try{

            if(mLocationPermissionsGranted){

                Task location=mFusedLocationProviderClient.getLastLocation();  // Be sure to get the correct Task library, there are two
                location.addOnCompleteListener(new OnCompleteListener() {
                    @Override
                    public void onComplete(@NonNull Task task) {

                        if(task.isSuccessful()){

                            Log.d(TAG, "onComplete: Found Location !");
                            //Create a Location object first

                            Location currentLocation=(Location) task.getResult();

                            moveCamera(new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude()), DEFAULT_ZOOM_MAGNITUDE, "My Location");

                            // DEFAULT_ZOOM_MAGNITUDE is a global variable decalred earlier
                        }

                        else{   // the else part comprises of the failure to fetch messages only

                            Log.d(TAG, "onComplete: Current location is null");
                            Toast.makeText(theMapActivity.this, "Unablt to fetch the current location", Toast.LENGTH_SHORT).show();

                        }
                    }
                });
            }

        } catch (SecurityException e){

            Log.d(TAG, "getDeviceLocation: SecurityException:" + e.getMessage());
        }
    }

    private void moveCamera(LatLng latlng, float zoom, String title){

        Log.d(TAG, "moveCamera: move the camera to: latitude: " + latlng.latitude + ", longitude: " + latlng.longitude);
        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latlng, zoom));

        if(!title.equals("My Location"))
        {
            MarkerOptions options= new MarkerOptions()
                    .position(latlng)
                    .title(title);
            mMap.addMarker(options);
        }

         hidesoftkeyboard();

    }

    private void initMap(){

        Log.d(TAG, "initMap: initializing map");

        SupportMapFragment mapFragment= (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.themapname);

        mapFragment.getMapAsync(theMapActivity.this);


    }

    private void getLocationPermission(){

        Log.d(TAG, "getLocationPermission: getting location permission");

        String[] permissions={Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION};

        if (ContextCompat.checkSelfPermission(this.getApplicationContext(), FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            if(ContextCompat.checkSelfPermission(this.getApplicationContext(), COARSE_LOCATION)==PackageManager.PERMISSION_GRANTED){
                mLocationPermissionsGranted=true;
                initMap();
            }else{
                ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE);
            }
        }

        else{
            ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {

        Log.d(TAG, "onRequestPermissionResult: called");
        mLocationPermissionsGranted=false;
        switch(requestCode){
            case LOCATION_PERMISSION_REQUEST_CODE:{
                if(grantResults.length>0)// && grantResults[0]==PackageManager.PERMISSION_GRANTED){
                {
                    for(int i=0;i<grantResults.length;i++){
                        if(grantResults[i]!=PackageManager.PERMISSION_GRANTED){
                            Log.d(TAG, "onRequestPermissionsResult: permission denied");
                            mLocationPermissionsGranted=false;
                            return;  // Understand why we substitued break with 'return'
                        }
                    }
                    mLocationPermissionsGranted=true;
                    Log.d(TAG, "onRequestPemissionResult: permission granted");

                    // In this case, we can initialize the map

                    initMap();
                }
            }
        }
    }

    private void hidesoftkeyboard(){
        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
    }
}
